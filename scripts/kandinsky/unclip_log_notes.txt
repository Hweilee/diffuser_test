
decoder diffusion
1. create initial latents (x_t) [B, C, H, W]
  decoder_latents [1, 3, 64, 64]
  0%|                                                                                                                                                                                | 0/25 [00:00<?, ?it/s]i :0
2. latent model 
  latent_model_input [2, 3, 64, 64]
  noise_pred [2, 6, 64, 64]
3. CFG 
   noise_pred [2, 6, 64, 64] -> uncond [1, 6, 64, 64], cond [1, 6, 64, 64]
                                
   uncond:  uncond_noise [1, 3, 64, 64]       uncond_variance(not used)
   cond:    cond_noise[1, 3, 64, 64]          cond_variance[1, 3, 64, 64]
            cfg(uncond_noise, cond_noise)  ->   noise_pred [1, 3, 64, 64] + cond_variance[1, 3, 64, 64] -> noise_pred [1, 6, 64, 64]

4. calculate previous noisy sample: x_t -> x_t-1:
   inputs for scheduler.step:
    -noise_pred (guided model_output) [1, 6, 64, 64]
    -t/timestep: 999
    -latent/sample/previous denoised (x_t):[1, 3, 64, 64]

   noise_pred(guided outmodel_output) [1, 6, 64, 64] 
      -> model_output (predicted_noise): [1, 3, 64, 64]
      -> predicted_variance: [1, 3, 64, 64]
   pred_noise -> pred_x0: [1, 3, 64, 64]
   pred_prev_sample(xt-1): [1, 3, 64, 64]
   
   generate random variance_noise [1, 3, 64, 64]
   predicated_variance [1, 3, 64, 64] -> variance [1, 3, 64, 64]
   final xt-1 [1, 3, 64, 64]
















   
  4%|██████▋                                                                                                                                                                 | 1/25 [00:00<00:17,  1.38it/s]i :1
latent_model_input :torch.Size([2, 3, 64, 64])
noise_pred:torch.Size([2, 6, 64, 64])
pred -> uncond torch.Size([1, 6, 64, 64]), cond torch.Size([1, 6, 64, 64]) 
uncond -> uncond_noise torch.Size([1, 3, 64, 64]), uncond_variance(not used)
cond -> cond_noise torch.Size([1, 3, 64, 64]), cond_variancetorch.Size([1, 3, 64, 64])
 cond_noise + uncond_noise -> cfg -> noise_pred torch.Size([1, 3, 64, 64])
noise_pred + cond_variance -> noise_pred: torch.Size([1, 6, 64, 64])
prev_timestep: 916
inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 6, 64, 64])
  -t/timestep: 957
  -latent/sample/previous denoised: torch.Size([1, 3, 64, 64])
noise_pred/outmodel_output -> model_output (noise): torch.Size([1, 3, 64, 64]), predicted_variance: torch.Size([1, 3, 64, 64]) 
 pred_noise -> pred_original_sample: torch.Size([1, 3, 64, 64]) 
pred_prev_sample: torch.Size([1, 3, 64, 64])
add noise
generate variance_noise: torch.Size([1, 3, 64, 64])
 -> _get_variance -> variance torch.Size([1, 3, 64, 64])
step return pred_prev_sample: torch.Size([1, 3, 64, 64])
i :2
latent_model_input :torch.Size([2, 3, 64, 64])
noise_pred:torch.Size([2, 6, 64, 64])
pred -> uncond torch.Size([1, 6, 64, 64]), cond torch.Size([1, 6, 64, 64]) 
uncond -> uncond_noise torch.Size([1, 3, 64, 64]), uncond_variance(not used)
cond -> cond_noise torch.Size([1, 3, 64, 64]), cond_variancetorch.Size([1, 3, 64, 64])
 cond_noise + uncond_noise -> cfg -> noise_pred torch.Size([1, 3, 64, 64])
noise_pred + cond_variance -> noise_pred: torch.Size([1, 6, 64, 64])
prev_timestep: 874
inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 6, 64, 64])
  -t/timestep: 916
  -latent/sample/previous denoised: torch.Size([1, 3, 64, 64])
noise_pred/outmodel_output -> model_output (noise): torch.Size([1, 3, 64, 64]), predicted_variance: torch.Size([1, 3, 64, 64]) 
 pred_noise -> pred_original_sample: torch.Size([1, 3, 64, 64]) 
pred_prev_sample: torch.Size([1, 3, 64, 64])
add noise
generate variance_noise: torch.Size([1, 3, 64, 64])
 -> _get_variance -> variance torch.Size([1, 3, 64, 64])
step return pred_prev_sample: torch.Size([1, 3, 64, 64])
 12%|████████████████████▏                                                                                                                                                   | 3/25 [00:00<00:05,  4.06it/s]i :3
latent_model_input :torch.Size([2, 3, 64, 64])
noise_pred:torch.Size([2, 6, 64, 64])
pred -> uncond torch.Size([1, 6, 64, 64]), cond torch.Size([1, 6, 64, 64]) 
uncond -> uncond_noise torch.Size([1, 3, 64, 64]), uncond_variance(not used)
cond -> cond_noise torch.Size([1, 3, 64, 64]), cond_variancetorch.Size([1, 3, 64, 64])
 cond_noise + uncond_noise -> cfg -> noise_pred torch.Size([1, 3, 64, 64])
noise_pred + cond_variance -> noise_pred: torch.Size([1, 6, 64, 64])
prev_timestep: 832
inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 6, 64, 64])
  -t/timestep: 874
  -latent/sample/previous denoised: torch.Size([1, 3, 64, 64])
noise_pred/outmodel_output -> model_output (noise): torch.Size([1, 3, 64, 64]), predicted_variance: torch.Size([1, 3, 64, 64]) 
 pred_noise -> pred_original_sample: torch.Size([1, 3, 64, 64]) 
pred_prev_sample: torch.Size([1, 3, 64, 64])
add noise
generate variance_noise: torch.Size([1, 3, 64, 64])
 -> _get_variance -> variance torch.Size([1, 3, 64, 64])
step return pred_prev_sample: torch.Size([1, 3, 64, 64])
i :4
latent_model_input :torch.Size([2, 3, 64, 64])
noise_pred:torch.Size([2, 6, 64, 64])
pred -> uncond torch.Size([1, 6, 64, 64]), cond torch.Size([1, 6, 64, 64]) 
uncond -> uncond_noise torch.Size([1, 3, 64, 64]), uncond_variance(not used)
cond -> cond_noise torch.Size([1, 3, 64, 64]), cond_variancetorch.Size([1, 3, 64, 64])
 cond_noise + uncond_noise -> cfg -> noise_pred torch.Size([1, 3, 64, 64])
noise_pred + cond_variance -> noise_pred: torch.Size([1, 6, 64, 64])
prev_timestep: 791
inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 6, 64, 64])
  -t/timestep: 832
  -latent/sample/previous denoised: torch.Size([1, 3, 64, 64])
noise_pred/outmodel_output -> model_output (noise): torch.Size([1, 3, 64, 64]), predicted_variance: torch.Size([1, 3, 64, 64]) 
 pred_noise -> pred_original_sample: torch.Size([1, 3, 64, 64]) 
pred_prev_sample: torch.Size([1, 3, 64, 64])
add noise
generate variance_noise: torch.Size([1, 3, 64, 64])
 -> _get_variance -> variance torch.Size([1, 3, 64, 64])
step return pred_prev_sample: torch.Size([1, 3, 64, 64])
 20%|█████████████████████████████████▌                                                                                                                                      | 5/25 [00:01<00:03,  6.26it/s]i :5
latent_model_input :torch.Size([2, 3, 64, 64])
noise_pred:torch.Size([2, 6, 64, 64])
pred -> uncond torch.Size([1, 6, 64, 64]), cond torch.Size([1, 6, 64, 64]) 
uncond -> uncond_noise torch.Size([1, 3, 64, 64]), uncond_variance(not used)
cond -> cond_noise torch.Size([1, 3, 64, 64]), cond_variancetorch.Size([1, 3, 64, 64])
 cond_noise + uncond_noise -> cfg -> noise_pred torch.Size([1, 3, 64, 64])
noise_pred + cond_variance -> noise_pred: torch.Size([1, 6, 64, 64])
prev_timestep: 749
inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 6, 64, 64])
  -t/timestep: 791
  -latent/sample/previous denoised: torch.Size([1, 3, 64, 64])
noise_pred/outmodel_output -> model_output (noise): torch.Size([1, 3, 64, 64]), predicted_variance: torch.Size([1, 3, 64, 64]) 
 pred_noise -> pred_original_sample: torch.Size([1, 3, 64, 64]) 
pred_prev_sample: torch.Size([1, 3, 64, 64])
add noise
generate variance_noise: torch.Size([1, 3, 64, 64])
 -> _get_variance -> variance torch.Size([1, 3, 64, 64])
step return pred_prev_sample: torch.Size([1, 3, 64, 64])
i :6
latent_model_input :torch.Size([2, 3, 64, 64])
noise_pred:torch.Size([2, 6, 64, 64])
pred -> uncond torch.Size([1, 6, 64, 64]), cond torch.Size([1, 6, 64, 64]) 
uncond -> uncond_noise torch.Size([1, 3, 64, 64]), uncond_variance(not used)
cond -> cond_noise torch.Size([1, 3, 64, 64]), cond_variancetorch.Size([1, 3, 64, 64])
 cond_noise + uncond_noise -> cfg -> noise_pred torch.Size([1, 3, 64, 64])
noise_pred + cond_variance -> noise_pred: torch.Size([1, 6, 64, 64])
prev_timestep: 708
inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 6, 64, 64])
  -t/timestep: 749
  -latent/sample/previous denoised: torch.Size([1, 3, 64, 64])
noise_pred/outmodel_output -> model_output (noise): torch.Size([1, 3, 64, 64]), predicted_variance: torch.Size([1, 3, 64, 64]) 
 pred_noise -> pred_original_sample: torch.Size([1, 3, 64, 64]) 
pred_prev_sample: torch.Size([1, 3, 64, 64])
add noise
generate variance_noise: torch.Size([1, 3, 64, 64])
 -> _get_variance -> variance torch.Size([1, 3, 64, 64])
step return pred_prev_sample: torch.Size([1, 3, 64, 64])
 28%|███████████████████████████████████████████████                                                                                                                         | 7/25 [00:01<00:02,  7.98it/s]i :7
latent_model_input :torch.Size([2, 3, 64, 64])
noise_pred:torch.Size([2, 6, 64, 64])
pred -> uncond torch.Size([1, 6, 64, 64]), cond torch.Size([1, 6, 64, 64]) 
uncond -> uncond_noise torch.Size([1, 3, 64, 64]), uncond_variance(not used)
cond -> cond_noise torch.Size([1, 3, 64, 64]), cond_variancetorch.Size([1, 3, 64, 64])
 cond_noise + uncond_noise -> cfg -> noise_pred torch.Size([1, 3, 64, 64])
noise_pred + cond_variance -> noise_pred: torch.Size([1, 6, 64, 64])
prev_timestep: 666
inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 6, 64, 64])
  -t/timestep: 708
  -latent/sample/previous denoised: torch.Size([1, 3, 64, 64])
noise_pred/outmodel_output -> model_output (noise): torch.Size([1, 3, 64, 64]), predicted_variance: torch.Size([1, 3, 64, 64]) 
 pred_noise -> pred_original_sample: torch.Size([1, 3, 64, 64]) 
pred_prev_sample: torch.Size([1, 3, 64, 64])
add noise
generate variance_noise: torch.Size([1, 3, 64, 64])
 -> _get_variance -> variance torch.Size([1, 3, 64, 64])
step return pred_prev_sample: torch.Size([1, 3, 64, 64])
i :8
latent_model_input :torch.Size([2, 3, 64, 64])
noise_pred:torch.Size([2, 6, 64, 64])
pred -> uncond torch.Size([1, 6, 64, 64]), cond torch.Size([1, 6, 64, 64]) 
uncond -> uncond_noise torch.Size([1, 3, 64, 64]), uncond_variance(not used)
cond -> cond_noise torch.Size([1, 3, 64, 64]), cond_variancetorch.Size([1, 3, 64, 64])
 cond_noise + uncond_noise -> cfg -> noise_pred torch.Size([1, 3, 64, 64])
noise_pred + cond_variance -> noise_pred: torch.Size([1, 6, 64, 64])
prev_timestep: 624
inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 6, 64, 64])
  -t/timestep: 666
  -latent/sample/previous denoised: torch.Size([1, 3, 64, 64])
noise_pred/outmodel_output -> model_output (noise): torch.Size([1, 3, 64, 64]), predicted_variance: torch.Size([1, 3, 64, 64]) 
 pred_noise -> pred_original_sample: torch.Size([1, 3, 64, 64]) 
pred_prev_sample: torch.Size([1, 3, 64, 64])
add noise
generate variance_noise: torch.Size([1, 3, 64, 64])
 -> _get_variance -> variance torch.Size([1, 3, 64, 64])
step return pred_prev_sample: torch.Size([1, 3, 64, 64])
 36%|████████████████████████████████████████████████████████████▍                                                                                                           | 9/25 [00:01<00:01,  9.43it/s]i :9
latent_model_input :torch.Size([2, 3, 64, 64])
noise_pred:torch.Size([2, 6, 64, 64])
pred -> uncond torch.Size([1, 6, 64, 64]), cond torch.Size([1, 6, 64, 64]) 
uncond -> uncond_noise torch.Size([1, 3, 64, 64]), uncond_variance(not used)
cond -> cond_noise torch.Size([1, 3, 64, 64]), cond_variancetorch.Size([1, 3, 64, 64])
 cond_noise + uncond_noise -> cfg -> noise_pred torch.Size([1, 3, 64, 64])
noise_pred + cond_variance -> noise_pred: torch.Size([1, 6, 64, 64])
prev_timestep: 583
inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 6, 64, 64])
  -t/timestep: 624
  -latent/sample/previous denoised: torch.Size([1, 3, 64, 64])
noise_pred/outmodel_output -> model_output (noise): torch.Size([1, 3, 64, 64]), predicted_variance: torch.Size([1, 3, 64, 64]) 
 pred_noise -> pred_original_sample: torch.Size([1, 3, 64, 64]) 
pred_prev_sample: torch.Size([1, 3, 64, 64])
add noise
generate variance_noise: torch.Size([1, 3, 64, 64])
 -> _get_variance -> variance torch.Size([1, 3, 64, 64])
step return pred_prev_sample: torch.Size([1, 3, 64, 64])
i :10
latent_model_input :torch.Size([2, 3, 64, 64])
noise_pred:torch.Size([2, 6, 64, 64])
pred -> uncond torch.Size([1, 6, 64, 64]), cond torch.Size([1, 6, 64, 64]) 
uncond -> uncond_noise torch.Size([1, 3, 64, 64]), uncond_variance(not used)
cond -> cond_noise torch.Size([1, 3, 64, 64]), cond_variancetorch.Size([1, 3, 64, 64])
 cond_noise + uncond_noise -> cfg -> noise_pred torch.Size([1, 3, 64, 64])
noise_pred + cond_variance -> noise_pred: torch.Size([1, 6, 64, 64])
prev_timestep: 541
inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 6, 64, 64])
  -t/timestep: 583
  -latent/sample/previous denoised: torch.Size([1, 3, 64, 64])
noise_pred/outmodel_output -> model_output (noise): torch.Size([1, 3, 64, 64]), predicted_variance: torch.Size([1, 3, 64, 64]) 
 pred_noise -> pred_original_sample: torch.Size([1, 3, 64, 64]) 
pred_prev_sample: torch.Size([1, 3, 64, 64])
add noise
generate variance_noise: torch.Size([1, 3, 64, 64])
 -> _get_variance -> variance torch.Size([1, 3, 64, 64])
step return pred_prev_sample: torch.Size([1, 3, 64, 64])
 44%|█████████████████████████████████████████████████████████████████████████▍                                                                                             | 11/25 [00:01<00:01, 10.49it/s]i :11
latent_model_input :torch.Size([2, 3, 64, 64])
noise_pred:torch.Size([2, 6, 64, 64])
pred -> uncond torch.Size([1, 6, 64, 64]), cond torch.Size([1, 6, 64, 64]) 
uncond -> uncond_noise torch.Size([1, 3, 64, 64]), uncond_variance(not used)
cond -> cond_noise torch.Size([1, 3, 64, 64]), cond_variancetorch.Size([1, 3, 64, 64])
 cond_noise + uncond_noise -> cfg -> noise_pred torch.Size([1, 3, 64, 64])
noise_pred + cond_variance -> noise_pred: torch.Size([1, 6, 64, 64])
prev_timestep: 500
inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 6, 64, 64])
  -t/timestep: 541
  -latent/sample/previous denoised: torch.Size([1, 3, 64, 64])
noise_pred/outmodel_output -> model_output (noise): torch.Size([1, 3, 64, 64]), predicted_variance: torch.Size([1, 3, 64, 64]) 
 pred_noise -> pred_original_sample: torch.Size([1, 3, 64, 64]) 
pred_prev_sample: torch.Size([1, 3, 64, 64])
add noise
generate variance_noise: torch.Size([1, 3, 64, 64])
 -> _get_variance -> variance torch.Size([1, 3, 64, 64])
step return pred_prev_sample: torch.Size([1, 3, 64, 64])
i :12
latent_model_input :torch.Size([2, 3, 64, 64])
noise_pred:torch.Size([2, 6, 64, 64])
pred -> uncond torch.Size([1, 6, 64, 64]), cond torch.Size([1, 6, 64, 64]) 
uncond -> uncond_noise torch.Size([1, 3, 64, 64]), uncond_variance(not used)
cond -> cond_noise torch.Size([1, 3, 64, 64]), cond_variancetorch.Size([1, 3, 64, 64])
 cond_noise + uncond_noise -> cfg -> noise_pred torch.Size([1, 3, 64, 64])
noise_pred + cond_variance -> noise_pred: torch.Size([1, 6, 64, 64])
prev_timestep: 458
inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 6, 64, 64])
  -t/timestep: 500
  -latent/sample/previous denoised: torch.Size([1, 3, 64, 64])
noise_pred/outmodel_output -> model_output (noise): torch.Size([1, 3, 64, 64]), predicted_variance: torch.Size([1, 3, 64, 64]) 
 pred_noise -> pred_original_sample: torch.Size([1, 3, 64, 64]) 
pred_prev_sample: torch.Size([1, 3, 64, 64])
add noise
generate variance_noise: torch.Size([1, 3, 64, 64])
 -> _get_variance -> variance torch.Size([1, 3, 64, 64])
step return pred_prev_sample: torch.Size([1, 3, 64, 64])
 52%|██████████████████████████████████████████████████████████████████████████████████████▊                                                                                | 13/25 [00:01<00:01, 11.29it/s]i :13
latent_model_input :torch.Size([2, 3, 64, 64])
noise_pred:torch.Size([2, 6, 64, 64])
pred -> uncond torch.Size([1, 6, 64, 64]), cond torch.Size([1, 6, 64, 64]) 
uncond -> uncond_noise torch.Size([1, 3, 64, 64]), uncond_variance(not used)
cond -> cond_noise torch.Size([1, 3, 64, 64]), cond_variancetorch.Size([1, 3, 64, 64])
 cond_noise + uncond_noise -> cfg -> noise_pred torch.Size([1, 3, 64, 64])
noise_pred + cond_variance -> noise_pred: torch.Size([1, 6, 64, 64])
prev_timestep: 416
inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 6, 64, 64])
  -t/timestep: 458
  -latent/sample/previous denoised: torch.Size([1, 3, 64, 64])
noise_pred/outmodel_output -> model_output (noise): torch.Size([1, 3, 64, 64]), predicted_variance: torch.Size([1, 3, 64, 64]) 
 pred_noise -> pred_original_sample: torch.Size([1, 3, 64, 64]) 
pred_prev_sample: torch.Size([1, 3, 64, 64])
add noise
generate variance_noise: torch.Size([1, 3, 64, 64])
 -> _get_variance -> variance torch.Size([1, 3, 64, 64])
step return pred_prev_sample: torch.Size([1, 3, 64, 64])
i :14
latent_model_input :torch.Size([2, 3, 64, 64])
noise_pred:torch.Size([2, 6, 64, 64])
pred -> uncond torch.Size([1, 6, 64, 64]), cond torch.Size([1, 6, 64, 64]) 
uncond -> uncond_noise torch.Size([1, 3, 64, 64]), uncond_variance(not used)
cond -> cond_noise torch.Size([1, 3, 64, 64]), cond_variancetorch.Size([1, 3, 64, 64])
 cond_noise + uncond_noise -> cfg -> noise_pred torch.Size([1, 3, 64, 64])
noise_pred + cond_variance -> noise_pred: torch.Size([1, 6, 64, 64])
prev_timestep: 375
inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 6, 64, 64])
  -t/timestep: 416
  -latent/sample/previous denoised: torch.Size([1, 3, 64, 64])
noise_pred/outmodel_output -> model_output (noise): torch.Size([1, 3, 64, 64]), predicted_variance: torch.Size([1, 3, 64, 64]) 
 pred_noise -> pred_original_sample: torch.Size([1, 3, 64, 64]) 
pred_prev_sample: torch.Size([1, 3, 64, 64])
add noise
generate variance_noise: torch.Size([1, 3, 64, 64])
 -> _get_variance -> variance torch.Size([1, 3, 64, 64])
step return pred_prev_sample: torch.Size([1, 3, 64, 64])
 60%|████████████████████████████████████████████████████████████████████████████████████████████████████▏                                                                  | 15/25 [00:01<00:00, 11.91it/s]i :15
latent_model_input :torch.Size([2, 3, 64, 64])
noise_pred:torch.Size([2, 6, 64, 64])
pred -> uncond torch.Size([1, 6, 64, 64]), cond torch.Size([1, 6, 64, 64]) 
uncond -> uncond_noise torch.Size([1, 3, 64, 64]), uncond_variance(not used)
cond -> cond_noise torch.Size([1, 3, 64, 64]), cond_variancetorch.Size([1, 3, 64, 64])
 cond_noise + uncond_noise -> cfg -> noise_pred torch.Size([1, 3, 64, 64])
noise_pred + cond_variance -> noise_pred: torch.Size([1, 6, 64, 64])
prev_timestep: 333
inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 6, 64, 64])
  -t/timestep: 375
  -latent/sample/previous denoised: torch.Size([1, 3, 64, 64])
noise_pred/outmodel_output -> model_output (noise): torch.Size([1, 3, 64, 64]), predicted_variance: torch.Size([1, 3, 64, 64]) 
 pred_noise -> pred_original_sample: torch.Size([1, 3, 64, 64]) 
pred_prev_sample: torch.Size([1, 3, 64, 64])
add noise
generate variance_noise: torch.Size([1, 3, 64, 64])
 -> _get_variance -> variance torch.Size([1, 3, 64, 64])
step return pred_prev_sample: torch.Size([1, 3, 64, 64])
i :16
latent_model_input :torch.Size([2, 3, 64, 64])
noise_pred:torch.Size([2, 6, 64, 64])
pred -> uncond torch.Size([1, 6, 64, 64]), cond torch.Size([1, 6, 64, 64]) 
uncond -> uncond_noise torch.Size([1, 3, 64, 64]), uncond_variance(not used)
cond -> cond_noise torch.Size([1, 3, 64, 64]), cond_variancetorch.Size([1, 3, 64, 64])
 cond_noise + uncond_noise -> cfg -> noise_pred torch.Size([1, 3, 64, 64])
noise_pred + cond_variance -> noise_pred: torch.Size([1, 6, 64, 64])
prev_timestep: 291
inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 6, 64, 64])
  -t/timestep: 333
  -latent/sample/previous denoised: torch.Size([1, 3, 64, 64])
noise_pred/outmodel_output -> model_output (noise): torch.Size([1, 3, 64, 64]), predicted_variance: torch.Size([1, 3, 64, 64]) 
 pred_noise -> pred_original_sample: torch.Size([1, 3, 64, 64]) 
pred_prev_sample: torch.Size([1, 3, 64, 64])
add noise
generate variance_noise: torch.Size([1, 3, 64, 64])
 -> _get_variance -> variance torch.Size([1, 3, 64, 64])
step return pred_prev_sample: torch.Size([1, 3, 64, 64])
 68%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                                                     | 17/25 [00:01<00:00, 12.26it/s]i :17
latent_model_input :torch.Size([2, 3, 64, 64])
noise_pred:torch.Size([2, 6, 64, 64])
pred -> uncond torch.Size([1, 6, 64, 64]), cond torch.Size([1, 6, 64, 64]) 
uncond -> uncond_noise torch.Size([1, 3, 64, 64]), uncond_variance(not used)
cond -> cond_noise torch.Size([1, 3, 64, 64]), cond_variancetorch.Size([1, 3, 64, 64])
 cond_noise + uncond_noise -> cfg -> noise_pred torch.Size([1, 3, 64, 64])
noise_pred + cond_variance -> noise_pred: torch.Size([1, 6, 64, 64])
prev_timestep: 250
inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 6, 64, 64])
  -t/timestep: 291
  -latent/sample/previous denoised: torch.Size([1, 3, 64, 64])
noise_pred/outmodel_output -> model_output (noise): torch.Size([1, 3, 64, 64]), predicted_variance: torch.Size([1, 3, 64, 64]) 
 pred_noise -> pred_original_sample: torch.Size([1, 3, 64, 64]) 
pred_prev_sample: torch.Size([1, 3, 64, 64])
add noise
generate variance_noise: torch.Size([1, 3, 64, 64])
 -> _get_variance -> variance torch.Size([1, 3, 64, 64])
step return pred_prev_sample: torch.Size([1, 3, 64, 64])
i :18
latent_model_input :torch.Size([2, 3, 64, 64])
noise_pred:torch.Size([2, 6, 64, 64])
pred -> uncond torch.Size([1, 6, 64, 64]), cond torch.Size([1, 6, 64, 64]) 
uncond -> uncond_noise torch.Size([1, 3, 64, 64]), uncond_variance(not used)
cond -> cond_noise torch.Size([1, 3, 64, 64]), cond_variancetorch.Size([1, 3, 64, 64])
 cond_noise + uncond_noise -> cfg -> noise_pred torch.Size([1, 3, 64, 64])
noise_pred + cond_variance -> noise_pred: torch.Size([1, 6, 64, 64])
prev_timestep: 208
inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 6, 64, 64])
  -t/timestep: 250
  -latent/sample/previous denoised: torch.Size([1, 3, 64, 64])
noise_pred/outmodel_output -> model_output (noise): torch.Size([1, 3, 64, 64]), predicted_variance: torch.Size([1, 3, 64, 64]) 
 pred_noise -> pred_original_sample: torch.Size([1, 3, 64, 64]) 
pred_prev_sample: torch.Size([1, 3, 64, 64])
add noise
generate variance_noise: torch.Size([1, 3, 64, 64])
 -> _get_variance -> variance torch.Size([1, 3, 64, 64])
step return pred_prev_sample: torch.Size([1, 3, 64, 64])
 76%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▉                                        | 19/25 [00:02<00:00, 12.52it/s]i :19
latent_model_input :torch.Size([2, 3, 64, 64])
noise_pred:torch.Size([2, 6, 64, 64])
pred -> uncond torch.Size([1, 6, 64, 64]), cond torch.Size([1, 6, 64, 64]) 
uncond -> uncond_noise torch.Size([1, 3, 64, 64]), uncond_variance(not used)
cond -> cond_noise torch.Size([1, 3, 64, 64]), cond_variancetorch.Size([1, 3, 64, 64])
 cond_noise + uncond_noise -> cfg -> noise_pred torch.Size([1, 3, 64, 64])
noise_pred + cond_variance -> noise_pred: torch.Size([1, 6, 64, 64])
prev_timestep: 166
inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 6, 64, 64])
  -t/timestep: 208
  -latent/sample/previous denoised: torch.Size([1, 3, 64, 64])
noise_pred/outmodel_output -> model_output (noise): torch.Size([1, 3, 64, 64]), predicted_variance: torch.Size([1, 3, 64, 64]) 
 pred_noise -> pred_original_sample: torch.Size([1, 3, 64, 64]) 
pred_prev_sample: torch.Size([1, 3, 64, 64])
add noise
generate variance_noise: torch.Size([1, 3, 64, 64])
 -> _get_variance -> variance torch.Size([1, 3, 64, 64])
step return pred_prev_sample: torch.Size([1, 3, 64, 64])
i :20
latent_model_input :torch.Size([2, 3, 64, 64])
noise_pred:torch.Size([2, 6, 64, 64])
pred -> uncond torch.Size([1, 6, 64, 64]), cond torch.Size([1, 6, 64, 64]) 
uncond -> uncond_noise torch.Size([1, 3, 64, 64]), uncond_variance(not used)
cond -> cond_noise torch.Size([1, 3, 64, 64]), cond_variancetorch.Size([1, 3, 64, 64])
 cond_noise + uncond_noise -> cfg -> noise_pred torch.Size([1, 3, 64, 64])
noise_pred + cond_variance -> noise_pred: torch.Size([1, 6, 64, 64])
prev_timestep: 125
inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 6, 64, 64])
  -t/timestep: 166
  -latent/sample/previous denoised: torch.Size([1, 3, 64, 64])
noise_pred/outmodel_output -> model_output (noise): torch.Size([1, 3, 64, 64]), predicted_variance: torch.Size([1, 3, 64, 64]) 
 pred_noise -> pred_original_sample: torch.Size([1, 3, 64, 64]) 
pred_prev_sample: torch.Size([1, 3, 64, 64])
add noise
generate variance_noise: torch.Size([1, 3, 64, 64])
 -> _get_variance -> variance torch.Size([1, 3, 64, 64])
step return pred_prev_sample: torch.Size([1, 3, 64, 64])
 84%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                          | 21/25 [00:02<00:00, 12.74it/s]i :21
latent_model_input :torch.Size([2, 3, 64, 64])
noise_pred:torch.Size([2, 6, 64, 64])
pred -> uncond torch.Size([1, 6, 64, 64]), cond torch.Size([1, 6, 64, 64]) 
uncond -> uncond_noise torch.Size([1, 3, 64, 64]), uncond_variance(not used)
cond -> cond_noise torch.Size([1, 3, 64, 64]), cond_variancetorch.Size([1, 3, 64, 64])
 cond_noise + uncond_noise -> cfg -> noise_pred torch.Size([1, 3, 64, 64])
noise_pred + cond_variance -> noise_pred: torch.Size([1, 6, 64, 64])
prev_timestep: 83
inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 6, 64, 64])
  -t/timestep: 125
  -latent/sample/previous denoised: torch.Size([1, 3, 64, 64])
noise_pred/outmodel_output -> model_output (noise): torch.Size([1, 3, 64, 64]), predicted_variance: torch.Size([1, 3, 64, 64]) 
 pred_noise -> pred_original_sample: torch.Size([1, 3, 64, 64]) 
pred_prev_sample: torch.Size([1, 3, 64, 64])
add noise
generate variance_noise: torch.Size([1, 3, 64, 64])
 -> _get_variance -> variance torch.Size([1, 3, 64, 64])
step return pred_prev_sample: torch.Size([1, 3, 64, 64])
i :22
latent_model_input :torch.Size([2, 3, 64, 64])
noise_pred:torch.Size([2, 6, 64, 64])
pred -> uncond torch.Size([1, 6, 64, 64]), cond torch.Size([1, 6, 64, 64]) 
uncond -> uncond_noise torch.Size([1, 3, 64, 64]), uncond_variance(not used)
cond -> cond_noise torch.Size([1, 3, 64, 64]), cond_variancetorch.Size([1, 3, 64, 64])
 cond_noise + uncond_noise -> cfg -> noise_pred torch.Size([1, 3, 64, 64])
noise_pred + cond_variance -> noise_pred: torch.Size([1, 6, 64, 64])
prev_timestep: 42
inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 6, 64, 64])
  -t/timestep: 83
  -latent/sample/previous denoised: torch.Size([1, 3, 64, 64])
noise_pred/outmodel_output -> model_output (noise): torch.Size([1, 3, 64, 64]), predicted_variance: torch.Size([1, 3, 64, 64]) 
 pred_noise -> pred_original_sample: torch.Size([1, 3, 64, 64]) 
pred_prev_sample: torch.Size([1, 3, 64, 64])
add noise
generate variance_noise: torch.Size([1, 3, 64, 64])
 -> _get_variance -> variance torch.Size([1, 3, 64, 64])
step return pred_prev_sample: torch.Size([1, 3, 64, 64])
 92%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋             | 23/25 [00:02<00:00, 12.86it/s]i :23
latent_model_input :torch.Size([2, 3, 64, 64])
noise_pred:torch.Size([2, 6, 64, 64])
pred -> uncond torch.Size([1, 6, 64, 64]), cond torch.Size([1, 6, 64, 64]) 
uncond -> uncond_noise torch.Size([1, 3, 64, 64]), uncond_variance(not used)
cond -> cond_noise torch.Size([1, 3, 64, 64]), cond_variancetorch.Size([1, 3, 64, 64])
 cond_noise + uncond_noise -> cfg -> noise_pred torch.Size([1, 3, 64, 64])
noise_pred + cond_variance -> noise_pred: torch.Size([1, 6, 64, 64])
prev_timestep: 0
inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 6, 64, 64])
  -t/timestep: 42
  -latent/sample/previous denoised: torch.Size([1, 3, 64, 64])
noise_pred/outmodel_output -> model_output (noise): torch.Size([1, 3, 64, 64]), predicted_variance: torch.Size([1, 3, 64, 64]) 
 pred_noise -> pred_original_sample: torch.Size([1, 3, 64, 64]) 
pred_prev_sample: torch.Size([1, 3, 64, 64])
add noise
generate variance_noise: torch.Size([1, 3, 64, 64])
 -> _get_variance -> variance torch.Size([1, 3, 64, 64])
step return pred_prev_sample: torch.Size([1, 3, 64, 64])
i :24
latent_model_input :torch.Size([2, 3, 64, 64])
noise_pred:torch.Size([2, 6, 64, 64])
pred -> uncond torch.Size([1, 6, 64, 64]), cond torch.Size([1, 6, 64, 64]) 
uncond -> uncond_noise torch.Size([1, 3, 64, 64]), uncond_variance(not used)
cond -> cond_noise torch.Size([1, 3, 64, 64]), cond_variancetorch.Size([1, 3, 64, 64])
 cond_noise + uncond_noise -> cfg -> noise_pred torch.Size([1, 3, 64, 64])
noise_pred + cond_variance -> noise_pred: torch.Size([1, 6, 64, 64])
prev_timestep: None
inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 6, 64, 64])
  -t/timestep: 0
  -latent/sample/previous denoised: torch.Size([1, 3, 64, 64])
noise_pred/outmodel_output -> model_output (noise): torch.Size([1, 3, 64, 64]), predicted_variance: torch.Size([1, 3, 64, 64]) 
 pred_noise -> pred_original_sample: torch.Size([1, 3, 64, 64]) 
pred_prev_sample: torch.Size([1, 3, 64, 64])
add noise
step return pred_prev_sample: torch.Size([1, 3, 64, 64])
100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [00:02<00:00,  9.80it/s]
  0%|                                                                                                                                                                                 | 0/7 [00:00<?, ?it/s]inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 3, 256, 256])
  -t/timestep: 999
  -latent/sample/previous denoised: torch.Size([1, 3, 256, 256])
 pred_noise -> pred_original_sample: torch.Size([1, 3, 256, 256]) 
pred_prev_sample: torch.Size([1, 3, 256, 256])
add noise
generate variance_noise: torch.Size([1, 3, 256, 256])
 -> _get_variance -> variance torch.Size([])
step return pred_prev_sample: torch.Size([1, 3, 256, 256])
 14%|████████████████████████▏                                                                                                                                                | 1/7 [00:00<00:03,  1.97it/s]inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 3, 256, 256])
  -t/timestep: 832
  -latent/sample/previous denoised: torch.Size([1, 3, 256, 256])
 pred_noise -> pred_original_sample: torch.Size([1, 3, 256, 256]) 
pred_prev_sample: torch.Size([1, 3, 256, 256])
add noise
generate variance_noise: torch.Size([1, 3, 256, 256])
 -> _get_variance -> variance torch.Size([])
step return pred_prev_sample: torch.Size([1, 3, 256, 256])
 29%|████████████████████████████████████████████████▎                                                                                                                        | 2/7 [00:01<00:02,  1.96it/s]inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 3, 256, 256])
  -t/timestep: 666
  -latent/sample/previous denoised: torch.Size([1, 3, 256, 256])
 pred_noise -> pred_original_sample: torch.Size([1, 3, 256, 256]) 
pred_prev_sample: torch.Size([1, 3, 256, 256])
add noise
generate variance_noise: torch.Size([1, 3, 256, 256])
 -> _get_variance -> variance torch.Size([])
step return pred_prev_sample: torch.Size([1, 3, 256, 256])
 43%|████████████████████████████████████████████████████████████████████████▍                                                                                                | 3/7 [00:01<00:02,  1.96it/s]inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 3, 256, 256])
  -t/timestep: 500
  -latent/sample/previous denoised: torch.Size([1, 3, 256, 256])
 pred_noise -> pred_original_sample: torch.Size([1, 3, 256, 256]) 
pred_prev_sample: torch.Size([1, 3, 256, 256])
add noise
generate variance_noise: torch.Size([1, 3, 256, 256])
 -> _get_variance -> variance torch.Size([])
step return pred_prev_sample: torch.Size([1, 3, 256, 256])
 57%|████████████████████████████████████████████████████████████████████████████████████████████████▌                                                                        | 4/7 [00:02<00:01,  1.96it/s]inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 3, 256, 256])
  -t/timestep: 333
  -latent/sample/previous denoised: torch.Size([1, 3, 256, 256])
 pred_noise -> pred_original_sample: torch.Size([1, 3, 256, 256]) 
pred_prev_sample: torch.Size([1, 3, 256, 256])
add noise
generate variance_noise: torch.Size([1, 3, 256, 256])
 -> _get_variance -> variance torch.Size([])
step return pred_prev_sample: torch.Size([1, 3, 256, 256])
 71%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▋                                                | 5/7 [00:02<00:01,  1.96it/s]inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 3, 256, 256])
  -t/timestep: 166
  -latent/sample/previous denoised: torch.Size([1, 3, 256, 256])
 pred_noise -> pred_original_sample: torch.Size([1, 3, 256, 256]) 
pred_prev_sample: torch.Size([1, 3, 256, 256])
add noise
generate variance_noise: torch.Size([1, 3, 256, 256])
 -> _get_variance -> variance torch.Size([])
step return pred_prev_sample: torch.Size([1, 3, 256, 256])
 86%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊                        | 6/7 [00:03<00:00,  1.96it/s]inside step:
inputs
  -noise_pred/model_output: torch.Size([1, 3, 256, 256])
  -t/timestep: 0
  -latent/sample/previous denoised: torch.Size([1, 3, 256, 256])
 pred_noise -> pred_original_sample: torch.Size([1, 3, 256, 256]) 
pred_prev_sample: torch.Size([1, 3, 256, 256])
add noise
step return pred_prev_sample: torch.Size([1, 3, 256, 256])
