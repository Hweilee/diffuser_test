# This file is autogenerated by the command `make fix-copies`, do not edit.
from ..utils import DummyObject, requires_backends


class OnnxRuntimeModel(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class raise OptionalDependencyNotAvailable()(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class *  # noqa F403(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class AutoencoderKL,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class ControlNetModel,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class ModelMixin,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class PriorTransformer,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class T5FilmDecoder,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class Transformer2DModel,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class UNet1DModel,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class UNet2DConditionModel,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class UNet2DModel,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class UNet3DConditionModel,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class VQModel,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


def get_constant_schedule,(*args, **kwargs):
    requires_backends(get_constant_schedule,, ["onnx"])


def get_constant_schedule_with_warmup,(*args, **kwargs):
    requires_backends(get_constant_schedule_with_warmup,, ["onnx"])


def get_cosine_schedule_with_warmup,(*args, **kwargs):
    requires_backends(get_cosine_schedule_with_warmup,, ["onnx"])


def get_cosine_with_hard_restarts_schedule_with_warmup,(*args, **kwargs):
    requires_backends(get_cosine_with_hard_restarts_schedule_with_warmup,, ["onnx"])


def get_linear_schedule_with_warmup,(*args, **kwargs):
    requires_backends(get_linear_schedule_with_warmup,, ["onnx"])


def get_polynomial_decay_schedule_with_warmup,(*args, **kwargs):
    requires_backends(get_polynomial_decay_schedule_with_warmup,, ["onnx"])


def get_scheduler,(*args, **kwargs):
    requires_backends(get_scheduler,, ["onnx"])


class AudioPipelineOutput,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class DanceDiffusionPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class DDIMPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class DDPMPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class DiffusionPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class DiTPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class ImagePipelineOutput,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class KarrasVePipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class LDMPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class LDMSuperResolutionPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class PNDMPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class RePaintPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class ScoreSdeVePipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class DDIMInverseScheduler,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class DDIMScheduler,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class DDPMScheduler,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class DEISMultistepScheduler,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class DPMSolverMultistepScheduler,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class DPMSolverSinglestepScheduler,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class EulerAncestralDiscreteScheduler,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class EulerDiscreteScheduler,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class HeunDiscreteScheduler,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class IPNDMScheduler,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class KarrasVeScheduler,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class KDPM2AncestralDiscreteScheduler,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class KDPM2DiscreteScheduler,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class PNDMScheduler,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class RePaintScheduler,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class SchedulerMixin,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class ScoreSdeVeScheduler,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class UnCLIPScheduler,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class UniPCMultistepScheduler,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class VQDiffusionScheduler,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class EMAModel(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class raise OptionalDependencyNotAvailable()(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class *  # noqa F403(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class LMSDiscreteScheduler(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class raise OptionalDependencyNotAvailable()(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class *  # noqa F403(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class DPMSolverSDEScheduler(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class raise OptionalDependencyNotAvailable()(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class *  # noqa F403(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class AltDiffusionImg2ImgPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class AltDiffusionPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class AudioLDMPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class CycleDiffusionPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class IFImg2ImgPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class IFImg2ImgSuperResolutionPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class IFInpaintingPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class IFInpaintingSuperResolutionPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class IFPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class IFSuperResolutionPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class LDMTextToImagePipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class PaintByExamplePipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class RDMPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class SemanticStableDiffusionPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class StableDiffusionAttendAndExcitePipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class StableDiffusionControlNetPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class StableDiffusionDepth2ImgPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class StableDiffusionDiffEditPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class StableDiffusionImageVariationPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class StableDiffusionImg2ImgPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class StableDiffusionInpaintPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class StableDiffusionInpaintPipelineLegacy,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class StableDiffusionInstructPix2PixPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class StableDiffusionLatentUpscalePipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class StableDiffusionModelEditingPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class StableDiffusionPanoramaPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class StableDiffusionPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class StableDiffusionPipelineSafe,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class StableDiffusionPix2PixZeroPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class StableDiffusionSAGPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class StableDiffusionUpscalePipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class StableUnCLIPImg2ImgPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class StableUnCLIPPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class TextToVideoSDPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class TextToVideoZeroPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class UnCLIPImageVariationPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class UnCLIPPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class VersatileDiffusionDualGuidedPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class VersatileDiffusionImageVariationPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class VersatileDiffusionPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class VersatileDiffusionTextToImagePipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class VQDiffusionPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class raise OptionalDependencyNotAvailable()(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class *  # noqa F403(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class Index(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class IndexConfig(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class Retriever(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class raise OptionalDependencyNotAvailable()(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class *  # noqa F403(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class StableDiffusionKDiffusionPipeline(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class raise OptionalDependencyNotAvailable()(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class *  # noqa F403(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class OnnxStableDiffusionImg2ImgPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class OnnxStableDiffusionInpaintPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class OnnxStableDiffusionInpaintPipelineLegacy,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class OnnxStableDiffusionPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class OnnxStableDiffusionUpscalePipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class StableDiffusionOnnxPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class raise OptionalDependencyNotAvailable()(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class *  # noqa F403(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class AudioDiffusionPipeline(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class Mel(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class raise OptionalDependencyNotAvailable()(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class *  # noqa F403(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class SpectrogramDiffusionPipeline(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class raise OptionalDependencyNotAvailable()(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class *  # noqa F403(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class FlaxControlNetModel(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class FlaxModelMixin(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class FlaxUNet2DConditionModel(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class FlaxAutoencoderKL(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class FlaxDiffusionPipeline(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class FlaxDDIMScheduler,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class FlaxDDPMScheduler,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class FlaxDPMSolverMultistepScheduler,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class FlaxKarrasVeScheduler,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class FlaxLMSDiscreteScheduler,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class FlaxPNDMScheduler,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class FlaxSchedulerMixin,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class FlaxScoreSdeVeScheduler,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class raise OptionalDependencyNotAvailable()(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class *  # noqa F403(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class FlaxStableDiffusionControlNetPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class FlaxStableDiffusionImg2ImgPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class FlaxStableDiffusionInpaintPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class FlaxStableDiffusionPipeline,(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class raise OptionalDependencyNotAvailable()(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class *  # noqa F403(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])


class MidiProcessor(metaclass=DummyObject):
    _backends = ["onnx"]

    def __init__(self, *args, **kwargs):
        requires_backends(self, ["onnx"])

    @classmethod
    def from_config(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])

    @classmethod
    def from_pretrained(cls, *args, **kwargs):
        requires_backends(cls, ["onnx"])
